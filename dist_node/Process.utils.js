'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();exports.removeLink=removeLink;exports.ifLinkExists=ifLinkExists;exports.findLink=findLink;exports.splice=splice;exports.getPInfo=getPInfo;var _ProcessList=require('./ProcessList');var ProcessList=_interopRequireWildcard(_ProcessList);var _ProcessInfo=require('./ProcessInfo');var _ProcessInfo2=_interopRequireDefault(_ProcessInfo);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key]}}newObj.default=obj;return newObj}}function removeLink(links,source,target){if(!links||!source||!target){return[false,'Liquid.Process.removeLink Insufficient amount of arguments']}const linkPosition=findLink(links,source,target);if(linkPosition===-1){return[true,'none']}links.splice(linkPosition,1);return[true,'ok']}function ifLinkExists(links,questionedSource,questionedTarget){return findLink(links,questionedSource,questionedTarget)>=0}function findLink(links,source,target){let i=-1;for(let _ref of links){var _ref2=_slicedToArray(_ref,2);let linkSource=_ref2[0];let linkTarget=_ref2[1];i++;if(source===linkSource&&target===linkTarget){return i}}return-1}function splice(collection,comparator){let i=-1;let result=[];for(let item of collection){i++;if(comparator(item)){result.push(item);collection.splice(i,1);i--}}return result}function getPInfo(pid){if(!pid)return;const pInfo=ProcessList.getByRef(pid);if(!pInfo)return;if(!_ProcessInfo2.default.isAlive(pInfo))return;return pInfo}