'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.monitor=monitor;exports.demonitor=demonitor;var _Kernel=require('./Kernel');var Kernel=_interopRequireWildcard(_Kernel);var _ProcessInfo=require('./ProcessInfo');var _ProcessInfo2=_interopRequireDefault(_ProcessInfo);var _ProcessUtils=require('./Process.utils.js');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key]}}newObj.default=obj;return newObj}}const monitorLinks=[];function monitor(sourcePID,targetPID){if(!sourcePID||!targetPID){return[false,'Liquid.Process.monitor Insufficient amount of arguments']}if(sourcePID===targetPID){return[false,'Liquid.Process.monitor Self-monitor does nothing']}const targetPInfo=(0,_ProcessUtils.getPInfo)(targetPID);if(!targetPInfo){return[false,'Liquid.Process.link Observer is already dead process']}const sourcePInfo=(0,_ProcessUtils.getPInfo)(sourcePID);if(!sourcePInfo){return[false,'Liquid.Process.link Observed is already dead process']}if(!(0,_ProcessUtils.ifLinkExists)(monitorLinks,sourcePInfo,targetPInfo)){monitorLinks.push([sourcePInfo,targetPInfo,sourcePID,targetPID]);_ProcessInfo2.default.resolution(sourcePInfo).then(([exitCode,exitReason])=>{(0,_ProcessUtils.splice)(monitorLinks,([pInfo])=>pInfo===sourcePInfo).forEach(([,,sourcePID,targetPID])=>Kernel.send(targetPID,[exitCode,sourcePID,exitReason]))});return[true,'exists']}return[true,'new']}function demonitor(sourcePID,targetPID){if(!sourcePID||!targetPID){return[false,'Liquid.Process.demonitor Insufficient amount of arguments']}const targetPInfo=(0,_ProcessUtils.getPInfo)(targetPID);const sourcePInfo=(0,_ProcessUtils.getPInfo)(sourcePID);if(!sourcePInfo){return[false,'Liquid.Process.demonitor observed process is already dead']}if(!targetPInfo){return[false,'Liquid.Process.demonitor observer process is already dead']}return(0,_ProcessUtils.removeLink)(monitorLinks,sourcePInfo,targetPInfo)}