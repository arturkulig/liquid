'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.startLinkAll=exports.runFunction=exports.runModule=exports.runFormula=exports.exitGracefully=undefined;var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();let exitGracefully=exports.exitGracefully=(()=>{var _ref=_asyncToGenerator(function*(svPID,childrenRunning){while(childrenRunning.length>0){yield Process.exit(childrenRunning.splice(0,1)[0])}yield Process.endOf(svPID)});return function exitGracefully(_x,_x2){return _ref.apply(this,arguments)}})();let runFormula=exports.runFormula=(()=>{var _ref2=_asyncToGenerator(function*(formula){if(typeof formula==='object'){return yield runModule(formula)}if(typeof formula==='function'){return yield runFunction(formula)}_Console.externalConsole.error('Liquid.Supervisor.start Provided formula is unrunnable.',formula,'Provide either () => [boolean, pid] or { start: () => [boolean, pid]');return[false]});return function runFormula(_x3){return _ref2.apply(this,arguments)}})();let runModule=exports.runModule=(()=>{var _ref3=_asyncToGenerator(function*(formula){return yield runFunction(formula.start)});return function runModule(_x4){return _ref3.apply(this,arguments)}})();let runFunction=exports.runFunction=(()=>{var _ref4=_asyncToGenerator(function*(formula){try{const result=yield formula();if(_Pid2.default.isPid(result)){return[true,result]}if(result instanceof Array&&result.length===2){var _result=_slicedToArray(result,1);const ok=_result[0];if(!ok){_Console.externalConsole.error(formula.name||formula,result[1])}return result}}catch(e){return[false,e.stack||e.message||e]}const errorMsg=['Liquid.Supervisor.start','Unable to establish if supervisor actually run formula that spawned a process','\nReturn PID or [true, PID] or [false, \'error\']'].join('');_Console.externalConsole.error(errorMsg,formula);return[false,errorMsg,formula]});return function runFunction(_x5){return _ref4.apply(this,arguments)}})();let startLinkAll=exports.startLinkAll=(()=>{var _ref5=_asyncToGenerator(function*(childrenFormulas,supervisor){const childrenRunning=yield Promise.all(childrenFormulas.map(runFormula));return childrenRunning.map(function([runOK,pid]){if(!runOK){const fakePid={};(0,_Kernel.send)(supervisor,['error',fakePid]);return fakePid}var _Process$monitor=Process.monitor(pid,supervisor);var _Process$monitor2=_slicedToArray(_Process$monitor,1);const linkOK=_Process$monitor2[0];if(!linkOK){(0,_Kernel.send)(supervisor,['error',pid])}return pid})});return function startLinkAll(_x6,_x7){return _ref5.apply(this,arguments)}})();var _Kernel=require('./Kernel');var _Process=require('./Process');var Process=_interopRequireWildcard(_Process);var _Console=require('./Console');var _Pid=require('./Pid');var _Pid2=_interopRequireDefault(_Pid);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key]}}newObj.default=obj;return newObj}}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}