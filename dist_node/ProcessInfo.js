'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();exports.default=ProcessInfo;function ProcessInfo(pid,finished){this.pid=pid;this.isAlive=true;this.requests=[];this.exitReason='normal';this.exitResult=null;this.onExit=[];this.onError=[];this.toJSON=()=>`#${this.pid.valueOf()}`;this.resolution=finished.then(result=>{terminate(this,'normal',result)},reason=>{terminate(this,'error',reason)}).then(()=>[this.exitReason,this.exitResult])}ProcessInfo.new=(...args)=>new(Function.prototype.bind.apply(ProcessInfo,[null].concat(args)));ProcessInfo.pid=pInfo=>pInfo.pid;ProcessInfo.pushRequestResolvers=(pInfo,[pushToReceive,rejectReceive])=>{if(!pInfo.isAlive)return false;pInfo.requests.push([pushToReceive,rejectReceive]);return true};ProcessInfo.takeRequestResolvers=pInfo=>{if(!pInfo.isAlive)return false;if(pInfo.requests.length===0)return false;var _pInfo$requests$splic=pInfo.requests.splice(0,1);var _pInfo$requests$splic2=_slicedToArray(_pInfo$requests$splic,1);const pushToReceive=_pInfo$requests$splic2[0];return pushToReceive};ProcessInfo.isAlive=pInfo=>pInfo&&typeof pInfo==='object'&&pInfo.isAlive;ProcessInfo.getExitHandlers=pInfo=>pInfo.onExit;ProcessInfo.getErrorHandlers=pInfo=>pInfo.onError;ProcessInfo.pushExitHandler=(pInfo,handler)=>{if(!pInfo)return;if(!pInfo.isAlive)return;const handlers=ProcessInfo.getExitHandlers(pInfo);handlers&&handlers.indexOf(handler)===-1&&handlers.push(handler)};ProcessInfo.pushErrorHandler=(pInfo,handler)=>{if(!pInfo)return;if(!pInfo.isAlive)return;const handlers=ProcessInfo.getErrorHandlers(pInfo);handlers&&handlers.indexOf(handler)===-1&&handlers.push(handler)};ProcessInfo.raiseExit=(pInfo,result)=>{terminate(pInfo,'shutdown',result)};ProcessInfo.raiseError=(pInfo,result)=>{terminate(pInfo,'error',result)};ProcessInfo.resolution=pInfo=>pInfo.resolution;function terminate(pInfo,reason,result){if(!pInfo){return}if(!pInfo.isAlive){return}pInfo.isAlive=false;pInfo.exitReason=reason;pInfo.exitResult=result;pInfo.requests.splice(0,pInfo.requests.length).forEach(([pushToReceive,rejectReceive])=>rejectReceive(reason));switch(reason){case'error':{pInfo.onExit.splice(0,pInfo.onExit.length);pInfo.onError.splice(0,pInfo.onError.length).forEach(reaction=>reaction(pInfo,result));break}case'normal':case'shutdown':{pInfo.onExit.splice(0,pInfo.onExit.length).forEach(reaction=>reaction(pInfo,result));pInfo.onError.splice(0,pInfo.onError.length)}}}