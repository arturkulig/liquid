'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();exports.start=start;exports.addHandler=addHandler;exports.removeHandler=removeHandler;exports.notify=notify;var _Kernel=require('./Kernel');function _toArray(arr){return Array.isArray(arr)?arr:Array.from(arr)}function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}function start(name){var _spawn=(0,_Kernel.spawn)((()=>{var _ref=_asyncToGenerator(function*(receive){const handlers=[];while(true){var _ref2=yield receive();var _ref3=_toArray(_ref2);const cmd=_ref3[0];const args=_ref3.slice(1);switch(cmd){case'addHandler':{var _args=_slicedToArray(args,1);const handler=_args[0];handlers.push(handler);break}case'removeHandler':{var _args2=_slicedToArray(args,1);const handler=_args2[0];handlers.splice(handlers.indexOf(handler),1);break}case'notify':{var _args3=_slicedToArray(args,1);const event=_args3[0];yield Promise.all(handlers.map(function(handler){return handler(event)}))}}}});return function(_x){return _ref.apply(this,arguments)}})(),name);var _spawn2=_slicedToArray(_spawn,2);const ok=_spawn2[0];const pid=_spawn2[1];if(!ok){return[false,pid]}return[true,pid]}function addHandler(pid,handler){return(0,_Kernel.send)(pid,['addHandler',handler])}function removeHandler(pid,handler){return(0,_Kernel.send)(pid,['removeHandler',handler])}function notify(pid,event){return(0,_Kernel.send)(pid,['notify',event])}