'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.link=link;exports.unlink=unlink;var _ProcessInfo=require('./ProcessInfo');var _ProcessInfo2=_interopRequireDefault(_ProcessInfo);var _Console=require('./Console');var _ProcessUtils=require('./Process.utils.js');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const terminateLinks=[];function link(sourcePID,targetPID){if(!sourcePID||!targetPID){return[false,'Liquid.Process.link Insufficient amount of arguments']}if(sourcePID===targetPID){return[false,'Liquid.Process.link Self-link does nothing']}const targetPInfo=(0,_ProcessUtils.getPInfo)(targetPID);if(!targetPInfo){return[false,'Liquid.Process.link Target is already dead process']}const sourcePInfo=(0,_ProcessUtils.getPInfo)(sourcePID);if(!sourcePInfo){return[false,'Liquid.Process.link Source is already dead process']}if(!(0,_ProcessUtils.ifLinkExists)(terminateLinks,sourcePInfo,targetPInfo)){terminateLinks.push([sourcePInfo,targetPInfo]);_Console.debugConsole.log('Link new link',sourcePInfo.toJSON(),targetPInfo.toJSON());_Console.debugConsole.log('current links',terminateLinks.map(JSON.stringify));const chainReaction=(_,exitResult,exitReason)=>{(0,_ProcessUtils.splice)(terminateLinks,([pInfo])=>pInfo===sourcePInfo).forEach(([,targetPInfo])=>_ProcessInfo2.default.raiseExit(targetPInfo,[exitReason,exitResult]))};_ProcessInfo2.default.pushExitHandler(sourcePInfo,chainReaction);_ProcessInfo2.default.pushErrorHandler(sourcePInfo,chainReaction);return[true,'ok','new']}_Console.debugConsole.log('Link exists',sourcePInfo,targetPInfo);return[true,'ok','exists']}function unlink(sourcePID,targetPID){if(!sourcePID||!targetPID){return[false,'Liquid.Process.unlink Insufficient amount of arguments']}return(0,_ProcessUtils.removeLink)(terminateLinks,(0,_ProcessUtils.getPInfo)(sourcePID),(0,_ProcessUtils.getPInfo)(targetPID))}